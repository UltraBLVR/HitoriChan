const fs = require('fs');
const path = require('path');
const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');

const warningsPath = path.join(__dirname, '..', '..', 'warnings.json');

function loadWarnings() {
    if (!fs.existsSync(warningsPath)) return {};
    return JSON.parse(fs.readFileSync(warningsPath));
}

function saveWarnings(data) {
    fs.writeFileSync(warningsPath, JSON.stringify(data, null, 2));
}

async function warnUser({ target, reason, moderator, reply }) {
    const warnings = loadWarnings();

    if (!warnings[target.id]) warnings[target.id] = [];

    warnings[target.id].push({
        reason,
        warnedBy: moderator.tag,
        timestamp: new Date().toISOString()
    });

    saveWarnings(warnings);

    await reply(`⚠️ ${target.tag} has been warned for: **${reason}**`);
}

module.exports = {
    name: 'warn',

    data: new SlashCommandBuilder()
        .setName('warn')
        .setDescription('Warn a user and save it to a JSON file.')
        .addUserOption(option =>
            option.setName('user')
                .setDescription('The user to warn')
                .setRequired(true)
        )
        .addStringOption(option =>
            option.setName('reason')
                .setDescription('Reason for the warning')
                .setRequired(true)
        )
        .setDefaultMemberPermissions(PermissionFlagsBits.ManageMessages)
        .toJSON(),

    // Slash command execution
    async execute(interaction) {
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageMessages)) {
            return interaction.reply({ content: '❌ You don’t have permission to use this.', ephemeral: true });
        }

        const target = interaction.options.getUser('user');
        const reason = interaction.options.getString('reason');

        await warnUser({
            target,
            reason,
            moderator: interaction.user,
            reply: msg => interaction.reply({ content: msg, ephemeral: true })
        });
    },

    // Prefix/message command execution
    async run(message, args) {
        if (!message.member.permissions.has(PermissionFlagsBits.ManageMessages)) {
            return message.reply('❌ You don’t have permission to use this.');
        }

        const target = message.mentions.users.first();
        if (!target) return message.reply('❌ Please mention a user to warn.');

        const reason = args.slice(1).join(' ');
        if (!reason) return message.reply('❌ Please provide a reason.');

        await warnUser({
            target,
            reason,
            moderator: message.author,
            reply: msg => message.channel.send(msg)
        });
    }
};
